// L·∫•y c√°c ph·∫ßn t·ª≠ HTML c·∫ßn thi·∫øt
const subjectSelect = document.getElementById("subject-select");
const weekSelect = document.getElementById("week-select");
const questionContainer = document.getElementById("question-container");
const submitButton = document.getElementById("submit-button");
// const savePdfButton = document.getElementById("save-pdf-button"); // ƒê√£ b·ªè
const resultPanel = document.getElementById("result-panel");

let currentQuestions = []; // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ c√°c c√¢u h·ªèi hi·ªán t·∫°i

// M·∫£ng c√°c c√¢u khen ng·ª£i
const correctFeedbackPhrases = [
  "Fantastic job, Alex! You got it!",
  "Woohoo! That's super correct!",
  "Awesome! You're a superstar!",
  "Great work! Keep shining!",
  "You're amazing! Absolutely right!",
  "Excellent! That's exactly it!",
  "Perfect score for that one! Go Alex!",
  "Nailed it! So smart!",
  "Hooray! Correct answer!",
  "Superb! You're a winner!",
];

// M·∫£ng c√°c c√¢u ƒë·ªông vi√™n khi sai
const incorrectFeedbackPhrases = [
  "Oops, not quite! Keep trying!",
  "Almost there! Learn from this one!",
  "Don't worry, practice makes perfect!",
  "Good try! Let's see the correct answer.",
  "That's okay! We all make mistakes. You'll get it next time!",
  "Chin up! You're learning a lot!",
  "Close one! Time to learn something new!",
  "Think positive! Every mistake helps you learn!",
];

// New arrays for overall score feedback
const lowScoreFeedback = [
    "Great effort, Alex! Keep practicing, you're getting closer!",
    "Learning is a journey, Alex! Every step counts. You'll get there!",
    "Don't give up, superstar! This is just the beginning. Try again, you've got this!",
    "You're doing wonderfully just by trying! Let's review and grow stronger!",
    "Awesome job completing the test, Alex! Let's learn from these questions together!",
    "Every try makes you smarter! You're on your way to becoming an English master!",
];

const mediumScoreFeedback = [
    "Good job, Alex! You're really understanding a lot. Keep up the great work!",
    "You're doing very well, Alex! A little more practice and you'll be a pro!",
    "Fantastic progress! You're learning so much. Let's aim even higher next time!",
    "Way to go, Alex! Your hard work is paying off. Keep building those skills!",
    "Super! You're picking things up quickly. Keep challenging yourself!",
];

const highScoreFeedback = [
    "Absolutely brilliant, Alex! You're a true English whiz!",
    "Wow! What an amazing score, Alex! You're incredibly smart!",
    "You aced it, superstar! Truly outstanding work!",
    "Unbelievable! You're a champion, Alex! Keep up the excellent learning!",
    "Magnificent! Your dedication shines through! So proud of you!",
    "Pure genius! You totally rocked this test, Alex!",
];

// Hi·ªÉn th·ªã th√¥ng b√°o h∆∞·ªõng d·∫´n ban ƒë·∫ßu khi trang t·∫£i l·∫ßn ƒë·∫ßu
function showInitialInstruction() {
  questionContainer.innerHTML = `
    <div style="text-align: center; padding: 40px; background-color: #ffe0b2; border-radius: 12px; border: 2px dashed #ff9800; color: #e65100; box-shadow: 0 4px 10px rgba(0,0,0,0.1);">
        <p style="font-size: 2.2em; font-weight: bold; margin-bottom: 20px;">Hey Alex! üëã Let's learn!</p>
        <p style="font-size: 1.5em; margin-top: 15px; color: #4a148c;">Choose a <strong>Subject</strong> and a <strong>Week</strong> from the dropdown lists above to start your awesome test!</p>
        <p style="font-size: 1.2em; margin-top: 10px; color: #777;">Mom has prepared some fun challenges just for you!</p>
    </div>
  `;
  resultPanel.innerHTML = ""; // Clear previous results
  resultPanel.style.display = 'none'; // Hide result panel
}

// H√†m ƒë·ªÉ n·∫°p v√† hi·ªÉn th·ªã c√¢u h·ªèi
function loadQuestions() {
  const selectedSubject = subjectSelect.value;
  const selectedWeek = weekSelect.value;

  // N·∫øu ch∆∞a c√≥ m√¥n h·ªçc ho·∫∑c tu·∫ßn n√†o ƒë∆∞·ª£c ch·ªçn, hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
  if (!selectedSubject || !selectedWeek) {
    showInitialInstruction();
    currentQuestions = []; // Reset questions
    return;
  }

  const jsonUrl = `data/${selectedWeek}/${selectedSubject}.json`;

  // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
  questionContainer.innerHTML = "<p style='text-align: center; font-size: 1.5em; color: #555; margin-top: 30px;'>Loading awesome questions... just a sec!</p>";
  resultPanel.innerHTML = ""; // Clear previous results
  resultPanel.style.display = 'none'; // Hide result panel


  fetch(jsonUrl)
    .then((response) => {
      if (!response.ok) {
        // Ki·ªÉm tra l·ªói HTTP (v√≠ d·ª•: 404 Not Found)
        throw new Error(`HTTP error! Status: ${response.status} - Could not load ${jsonUrl}. Please check the file path and ensure it's there.`);
      }
      return response.json();
    })
    .then((data) => {
      // Kh·ªüi t·∫°o tr·∫°ng th√°i cho m·ªói c√¢u h·ªèi khi t·∫£i
      currentQuestions = data.map(q => ({
          ...q, // Sao ch√©p t·∫•t c·∫£ c√°c thu·ªôc t√≠nh hi·ªán c√≥
          isAnswered: false, // Th√™m thu·ªôc t√≠nh ƒë·ªÉ theo d√µi ƒë√£ tr·∫£ l·ªùi ch∆∞a
          isCorrect: false // Th√™m thu·ªôc t√≠nh ƒë·ªÉ theo d√µi c√≥ ƒë√∫ng kh√¥ng
      }));

      if (!currentQuestions || currentQuestions.length === 0) {
        questionContainer.innerHTML = `<p style="color: orange; text-align: center; font-size: 1.5em; margin-top: 30px;">Uh oh! No questions found for ${selectedSubject} in ${selectedWeek}. Maybe try another week?</p>`;
      } else {
        displayQuestions(currentQuestions);
      }
    })
    .catch((error) => {
      console.error("Error loading JSON:", error);
      questionContainer.innerHTML = `<p style="color: red; text-align: center; font-size: 1.5em; margin-top: 30px;">Woops! Something went wrong loading questions. Error: ${error.message}</p>`;
    });
}

// H√†m ƒë·ªÉ hi·ªÉn th·ªã c√¢u h·ªèi
function displayQuestions(questions) {
  // X√≥a n·ªôi dung c≈© trong questionContainer
  questionContainer.innerHTML = "";

  // Duy·ªát qua t·ª´ng c√¢u h·ªèi trong m·∫£ng questions
  questions.forEach((question, index) => {
    // T·∫°o m·ªôt ph·∫ßn t·ª≠ div ƒë·ªÉ ch·ª©a c√¢u h·ªèi
    const questionDiv = document.createElement("div");
    questionDiv.classList.add("question"); // Th√™m class "question" ƒë·ªÉ ƒë·ªãnh d·∫°ng CSS
    questionDiv.dataset.questionIndex = index; // L∆∞u index c·ªßa c√¢u h·ªèi
    questionDiv.style.position = 'relative'; // Quan tr·ªçng cho emoji absolute

    // T·∫°o m·ªôt ph·∫ßn t·ª≠ p ƒë·ªÉ hi·ªÉn th·ªã n·ªôi dung c√¢u h·ªèi
    const questionText = document.createElement("p");
    questionText.textContent = `${index + 1}. ${question.text}`; // Th√™m s·ªë th·ª© t·ª± c√¢u h·ªèi
    questionDiv.appendChild(questionText);

    // T·∫°o c√°c ph·∫ßn t·ª≠ HTML t√πy thu·ªôc v√†o lo·∫°i c√¢u h·ªèi
    switch (question.type) {
      case "mcq":
        question.options.forEach((option) => {
          const radioInput = document.createElement("input");
          radioInput.type = "radio";
          radioInput.name = `question-${index}`; // ƒê·∫∑t name ƒë·ªÉ nh√≥m c√°c radio button
          radioInput.value = option;
          radioInput.id = `q${index}-option-${option.replace(/\s+/g, '-')}`; // Th√™m ID duy nh·∫•t

          const label = document.createElement("label");
          label.htmlFor = radioInput.id; // Li√™n k·∫øt label v·ªõi input
          label.textContent = option;
          label.prepend(radioInput); // ƒê·∫∑t radio button ·ªü ƒë·∫ßu ƒë√°p √°n

          questionDiv.appendChild(label);
        });
        break;

      case "truefalse":
        // T·∫°o c√°c n√∫t radio cho True v√† False
        const trueLabel = document.createElement("label");
        const trueInput = document.createElement("input");
        trueInput.type = "radio";
        trueInput.name = `question-${index}`;
        trueInput.value = "true"; // Gi√° tr·ªã l√† string "true"
        trueInput.id = `q${index}-true`;
        trueLabel.htmlFor = trueInput.id;
        trueLabel.prepend(trueInput);
        trueLabel.append(" True"); // Th√™m text " True"
        questionDiv.appendChild(trueLabel);

        const falseLabel = document.createElement("label");
        const falseInput = document.createElement("input");
        falseInput.type = "radio";
        falseInput.name = `question-${index}`;
        falseInput.value = "false"; // Gi√° tr·ªã l√† string "false"
        falseInput.id = `q${index}-false`;
        falseLabel.htmlFor = falseInput.id;
        falseLabel.prepend(falseInput);
        falseLabel.append(" False"); // Th√™m text " False"
        questionDiv.appendChild(falseLabel);
        break;

      case "fillin":
        // T·∫°o m·ªôt √¥ input ri√™ng bi·ªát cho fill-in
        const fillInInput = document.createElement("input");
        fillInInput.type = "text"; // Gi·ªØ l√† text ƒë·ªÉ cho ph√©p nh·∫≠p c√°c k√Ω t·ª± kh√°c n·∫øu c·∫ßn, nh∆∞ng s·∫Ω parse s·ªë
        fillInInput.name = `question-${index}`;
        fillInInput.classList.add("fill-in-blank-standalone"); // New class for standalone blank
        fillInInput.placeholder = "Type your answer here"; // A helpful placeholder
        questionDiv.appendChild(fillInInput);
        break;

      case "WriteAnswer":
        const writeAnswerTextarea = document.createElement("textarea");
        writeAnswerTextarea.name = `question-${index}`;
        writeAnswerTextarea.rows = "4"; // S·ªë h√†ng m·∫∑c ƒë·ªãnh
        writeAnswerTextarea.classList.add("write-answer-textarea");
        writeAnswerTextarea.placeholder = "Write your answer here...";
        questionDiv.appendChild(writeAnswerTextarea);
        break;
    }

    // T·∫°o m·ªôt n√∫t "Check Answer"
    const checkButton = document.createElement("button");
    checkButton.textContent = "Check Answer";
    checkButton.classList.add("check-answer-button");
    checkButton.addEventListener("click", () => {
      checkAnswer(question, index, checkButton); // Truy·ªÅn n√∫t v√†o h√†m
    });
    questionDiv.appendChild(checkButton);

    // Th√™m questionDiv v√†o questionContainer
    questionContainer.appendChild(questionDiv);
  });
}

// H√†m ƒë·ªÉ ki·ªÉm tra ƒë√°p √°n
function checkAnswer(question, index, checkButton) { // Th√™m checkButton l√†m tham s·ªë
  // L·∫•y div ch·ª©a c√¢u h·ªèi c·ª• th·ªÉ n√†y
  const questionDiv = document.querySelector(`.question[data-question-index="${index}"]`);

  // X√≥a th√¥ng b√°o k·∫øt qu·∫£ c≈© (n·∫øu c√≥)
  const existingResultMessage = questionDiv.querySelector(".result-message");
  if (existingResultMessage) {
    existingResultMessage.remove();
  }
  // X√≥a emoji c≈© (n·∫øu c√≥)
  const existingEmoji = questionDiv.querySelector(".feedback-emoji");
  if (existingEmoji) {
    existingEmoji.remove();
  }

  let userAnswer;
  let inputElements; // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ ph·∫ßn t·ª≠ input/textarea (c√≥ th·ªÉ l√† NodeList)

  // L·∫•y ƒë√°p √°n c·ªßa ng∆∞·ªùi d√πng t√πy thu·ªôc v√†o lo·∫°i c√¢u h·ªèi
  switch (question.type) {
    case "mcq":
    case "truefalse":
      const selectedRadio = questionDiv.querySelector(
        `input[name="question-${index}"]:checked`
      );
      if (selectedRadio) {
        userAnswer = selectedRadio.value;
        inputElements = questionDiv.querySelectorAll(`input[name="question-${index}"]`);
      } else {
        const resultParagraph = createResultMessage("Hey! Don't forget to pick an answer!", "orange");
        questionDiv.appendChild(resultParagraph);
        return; // D·ª´ng vi·ªác ki·ªÉm tra ƒë√°p √°n
      }
      break;

    case "fillin":
      const fillInInput = questionDiv.querySelector(
        `input[name="question-${index}"]`
      );
      if (fillInInput) {
        userAnswer = fillInInput.value.trim(); // L·∫•y gi√° tr·ªã v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng
        inputElements = [fillInInput]; // B·ªçc v√†o m·∫£ng ƒë·ªÉ x·ª≠ l√Ω chung
      } else {
        userAnswer = "";
      }
      if (userAnswer === "") {
        const resultParagraph = createResultMessage("Oops! Please fill in the blank before checking.", "orange");
        questionDiv.appendChild(resultParagraph);
        return;
      }
      break;

    case "WriteAnswer":
      const writeAnswerTextarea = questionDiv.querySelector(
        `textarea[name="question-${index}"]`
      );
      if (writeAnswerTextarea) {
        userAnswer = writeAnswerTextarea.value.trim();
        inputElements = [writeAnswerTextarea]; // B·ªçc v√†o m·∫£ng ƒë·ªÉ x·ª≠ l√Ω chung
      } else {
        userAnswer = "";
      }
      if (userAnswer === "") {
        const resultParagraph = createResultMessage("Almost there! Write your answer first.", "orange");
        questionDiv.appendChild(resultParagraph);
        return;
      }
      break;
  }

  // Ki·ªÉm tra ƒë√°p √°n
  let isCorrect = false;
  let formattedCorrectAnswer = String(question.answer); // M·∫∑c ƒë·ªãnh l√† chu·ªói, s·∫Ω ƒë·ªãnh d·∫°ng l·∫°i n·∫øu l√† s·ªë

  if (question.type === "truefalse") {
    const userAnswerBool = (userAnswer === "true");
    isCorrect = (userAnswerBool === question.answer);
  } else if (question.type === "fillin" && typeof question.answer === 'number') {
      // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho c√¢u h·ªèi to√°n d·∫°ng fillin v·ªõi ƒë√°p √°n l√† s·ªë
      // Lo·∫°i b·ªè d·∫•u ch·∫•m, ph·∫©y, v√† c√°c k√Ω t·ª± kh√¥ng ph·∫£i s·ªë ƒë·ªÉ parse
      const cleanedUserAnswer = userAnswer.replace(/[.,]/g, ''); // Remove commas and dots
      const parsedUserAnswer = parseInt(cleanedUserAnswer, 10); // Parse as integer

      isCorrect = parsedUserAnswer === question.answer;

      // ƒê·ªãnh d·∫°ng ƒë√°p √°n ƒë√∫ng v·ªõi d·∫•u ch·∫•m ph√¢n c√°ch h√†ng ngh√¨n cho hi·ªÉn th·ªã
      formattedCorrectAnswer = question.answer.toLocaleString('vi-VN'); // S·ª≠ d·ª•ng locale 'vi-VN' cho d·∫•u ch·∫•m
  } else {
    // X·ª≠ l√Ω cho MCQ, WriteAnswer, ho·∫∑c fillin v·ªõi ƒë√°p √°n d·∫°ng chu·ªói
    isCorrect = userAnswer.toLowerCase() === String(question.answer).toLowerCase();
  }


  // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√¢u h·ªèi trong m·∫£ng currentQuestions
  const qToUpdate = currentQuestions.find((q, i) => i === index);
  if (qToUpdate) {
      qToUpdate.isAnswered = true;
      qToUpdate.isCorrect = isCorrect;
  }


  // Hi·ªÉn th·ªã k·∫øt qu·∫£
  let resultMessageText;
  let resultMessageColor;
  // Use formattedCorrectAnswer for display in the explanation
  let explanationText = `The correct answer is: ${formattedCorrectAnswer}. ${question.explanation}`;

  if (isCorrect) {
    resultMessageText = correctFeedbackPhrases[Math.floor(Math.random() * correctFeedbackPhrases.length)];
    resultMessageColor = "green";
    // Trigger confetti!
    if (typeof confetti !== 'undefined') {
        const rect = checkButton.getBoundingClientRect();
        const x = (rect.left + rect.right) / 2 / window.innerWidth;
        const y = (rect.top + rect.bottom) / 2 / window.innerHeight;
        confetti({
            particleCount: 150, // More particles
            spread: 90, // Wider spread
            origin: { x, y }, // Origin from the button
            colors: ['#FFD700', '#FF4500', '#32CD32', '#1E90FF', '#FF1493'], // Fun colors
            disableForReducedMotion: true
        });
    }
  } else {
    resultMessageText = incorrectFeedbackPhrases[Math.floor(Math.random() * incorrectFeedbackPhrases.length)];
    resultMessageColor = "red";
    // Show a sad emoji/icon
    const sadEmoji = document.createElement('span');
    sadEmoji.textContent = 'üòî'; // Sad emoji
    sadEmoji.classList.add('feedback-emoji'); // Add class for styling
    questionDiv.appendChild(sadEmoji);

    // Fade out after a delay
    setTimeout(() => {
        sadEmoji.style.opacity = '0';
        setTimeout(() => sadEmoji.remove(), 1000); // Remove after fade out
    }, 1500); // Show for 1.5 seconds, then start fading
  }

  const resultParagraph = createResultMessage(resultMessageText, resultMessageColor, explanationText);
  questionDiv.appendChild(resultParagraph);

  // Disable inputs and check button after checking
  if (checkButton) {
      checkButton.disabled = true;
      checkButton.textContent = "Checked!"; // Simpler text
  }

  if (inputElements) {
      inputElements.forEach(input => {
          if (input.type === 'radio' || input.type === 'checkbox') {
              input.disabled = true;
          } else {
              input.readOnly = true;
              input.style.backgroundColor = "#e9ecef"; // Grey out input
          }
      });
  }
}

// Helper function to create result message paragraph
function createResultMessage(text, color, explanation = '') {
  const p = document.createElement("p");
  p.classList.add("result-message");

  // T·∫°o m·ªôt th·∫ª span ri√™ng cho ph·∫ßn th√¥ng b√°o ch√≠nh (Excellent! / Oops!)
  const feedbackSpan = document.createElement("span");
  feedbackSpan.classList.add("feedback-text"); // Th√™m class m·ªõi ƒë·ªÉ ƒë·ªãnh d·∫°ng CSS
  feedbackSpan.style.color = color;
  feedbackSpan.textContent = text; // S·ª≠ d·ª•ng textContent ƒë·ªÉ an to√†n h∆°n
  p.appendChild(feedbackSpan);

  if (explanation) {
    // T·∫°o m·ªôt th·∫ª i ri√™ng cho ph·∫ßn gi·∫£i th√≠ch
    const explanationI = document.createElement("i");
    explanationI.classList.add("explanation-text"); // Class ƒë√£ c√≥, s·∫Ω ƒë·∫£m b·∫£o xu·ªëng d√≤ng v√† nghi√™ng
    explanationI.textContent = explanation; // S·ª≠ d·ª•ng textContent ƒë·ªÉ an to√†n h∆°n
    p.appendChild(explanationI);
  }
  return p;
}


// G·ªçi h√†m hi·ªÉn th·ªã h∆∞·ªõng d·∫´n ban ƒë·∫ßu khi trang web ƒë∆∞·ª£c t·∫£i
window.addEventListener("load", showInitialInstruction);

// G·ªçi h√†m loadQuestions khi m√¥n h·ªçc ho·∫∑c tu·∫ßn ƒë∆∞·ª£c ch·ªçn
subjectSelect.addEventListener("change", loadQuestions);
weekSelect.addEventListener("change", loadQuestions);

// X·ª≠ l√Ω s·ª± ki·ªán khi n√∫t "Show My Score!" ƒë∆∞·ª£c b·∫•m
submitButton.addEventListener("click", () => {
  let totalCorrect = 0;
  let totalAnsweredQuestions = 0; // S·ªë c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra (b·∫•m Check Answer)
  let totalQuestions = currentQuestions.length;
  let score = 0;

  if (totalQuestions === 0) {
      resultPanel.innerHTML = "<p style='color: orange; text-align: center; font-size: 1.2em;'>No questions loaded yet! Select a subject and week first.</p>";
      resultPanel.style.display = 'block';
      resultPanel.scrollIntoView({ behavior: 'smooth', block: 'start' });
      return;
  }

  // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra ch∆∞a
  const allAnswered = currentQuestions.every(q => q.isAnswered);

  // X√≥a n·ªôi dung c≈© c·ªßa resultPanel tr∆∞·ªõc khi hi·ªÉn th·ªã k·∫øt qu·∫£ m·ªõi
  resultPanel.innerHTML = "";

  if (!allAnswered) {
    // Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu ch∆∞a tr·∫£ l·ªùi h·∫øt
    const warningDiv = document.createElement('div');
    warningDiv.classList.add('score-summary-warning');
    warningDiv.innerHTML = `
      <p style="font-size: 1.5em; font-weight: bold; color: #e65100;">Hold on, Alex! üëã</p>
      <p style="font-size: 1.2em; color: #4a148c;">It looks like you haven't clicked 'Check Answer' for all questions yet. Please do that first to get your full score!</p>
      <p style="font-size: 1em; color: #777; margin-top: 10px;">(Only questions you've checked will be counted below.)</p>
      <hr style="margin: 15px 0; border: 0; border-top: 1px dashed #ffc107;">
    `;
    resultPanel.appendChild(warningDiv);
  }

  // T√≠nh ƒëi·ªÉm cho c√°c c√¢u ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi
  currentQuestions.forEach(q => {
      if (q.isAnswered) { // Ch·ªâ t√≠nh ƒëi·ªÉm cho c√°c c√¢u ƒë√£ ƒë∆∞·ª£c "Check Answer"
          totalAnsweredQuestions++;
          if (q.isCorrect) {
              totalCorrect++;
              score += 10; // 10 ƒëi·ªÉm cho m·ªói c√¢u ƒë√∫ng
          }
      }
  });

  // Calculate percentage based on total questions in the test, not just answered ones
  const percentageCorrect = (totalCorrect / totalQuestions) * 100;
  let feedbackPhrase;
  let feedbackColor;
  let scoreSummaryClass;

  if (percentageCorrect < 70) {
      feedbackPhrase = lowScoreFeedback[Math.floor(Math.random() * lowScoreFeedback.length)];
      feedbackColor = '#f44336'; // Red
      scoreSummaryClass = 'score-summary-low';
  } else if (percentageCorrect >= 70 && percentageCorrect < 90) {
      feedbackPhrase = mediumScoreFeedback[Math.floor(Math.random() * mediumScoreFeedback.length)];
      feedbackColor = '#ffc107'; // Amber
      scoreSummaryClass = 'score-summary-medium';
  } else { // 90% tr·ªü l√™n
      feedbackPhrase = highScoreFeedback[Math.floor(Math.random() * highScoreFeedback.length)];
      feedbackColor = '#4CAF50'; // Green
      scoreSummaryClass = 'score-summary-high';
  }


  const summaryDiv = document.createElement('div');
  summaryDiv.classList.add('score-summary', scoreSummaryClass); // Add score-specific class


  summaryDiv.innerHTML = `
      <p style="font-size: 2.2em; font-weight: bold; color: ${feedbackColor}; margin-bottom: 10px;">üéâ Your Awesome Result! üéâ</p>
      <p style="font-size: 1.8em; color: #3f51b5;">${feedbackPhrase}</p>
      <p style="font-size: 1.6em; color: #3f51b5; margin-top: 15px;">You got <strong>${totalCorrect}</strong> out of <strong>${totalQuestions}</strong> questions correct!</p>
      <p style="font-size: 1.6em; color: #3f51b5;">Your total score is: <strong>${score} / ${totalQuestions * 10}</strong> points!</p>
      <p style="font-size: 1.2em; color: #777; margin-top: 25px;">Keep up the great work, Alex! Every bit of practice makes you super smart!</p>
  `;
  resultPanel.appendChild(summaryDiv);
  resultPanel.style.display = 'block'; // ƒê·∫£m b·∫£o result panel hi·ªÉn th·ªã

  resultPanel.scrollIntoView({ behavior: 'smooth', block: 'start' }); // Cu·ªôn ƒë·∫øn ph·∫ßn k·∫øt qu·∫£
});